/*
 * Equinix Fabric API v4
 * Equinix Fabric is an advanced software-defined interconnection solution that enables you to directly, securely and dynamically connect to distributed infrastructure and digital ecosystems on platform Equinix via a single port, Customers can use Fabric to connect to: </br> 1. Cloud Service Providers - Clouds, network and other service providers.  </br> 2. Enterprises - Other Equinix customers, vendors and partners.  </br> 3. Myself - Another customer instance deployed at Equinix. </br>
 *
 * The version of the OpenAPI document: 4.4
 * Contact: api-support@equinix.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.equinix.openapi.fabric.v4.api;

import com.equinix.openapi.fabric.ApiCallback;
import com.equinix.openapi.fabric.ApiClient;
import com.equinix.openapi.fabric.ApiException;
import com.equinix.openapi.fabric.ApiResponse;
import com.equinix.openapi.fabric.Configuration;
import com.equinix.openapi.fabric.Pair;
import com.equinix.openapi.fabric.ProgressRequestBody;
import com.equinix.openapi.fabric.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.equinix.openapi.fabric.v4.model.ConnectionRoutingProtocolPostRequest;
import com.equinix.openapi.fabric.v4.model.Error;
import com.equinix.openapi.fabric.v4.model.GetResponse;
import com.equinix.openapi.fabric.v4.model.RoutingProtocolBase;
import com.equinix.openapi.fabric.v4.model.RoutingProtocolChangeData;
import com.equinix.openapi.fabric.v4.model.RoutingProtocolChangeDataResponse;
import com.equinix.openapi.fabric.v4.model.RoutingProtocolData;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class RoutingProtocolsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RoutingProtocolsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RoutingProtocolsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createConnectionRoutingProtocol
     * @param connectionId Connection Id (required)
     * @param routingProtocolBase  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Connection ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createConnectionRoutingProtocolCall(String connectionId, RoutingProtocolBase routingProtocolBase, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = routingProtocolBase;

        // create path and map variables
        String localVarPath = "/fabric/v4/connections/{connectionId}/routingProtocols"
            .replace("{" + "connectionId" + "}", localVarApiClient.escapeString(connectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createConnectionRoutingProtocolValidateBeforeCall(String connectionId, RoutingProtocolBase routingProtocolBase, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'connectionId' is set
        if (connectionId == null) {
            throw new ApiException("Missing the required parameter 'connectionId' when calling createConnectionRoutingProtocol(Async)");
        }

        // verify the required parameter 'routingProtocolBase' is set
        if (routingProtocolBase == null) {
            throw new ApiException("Missing the required parameter 'routingProtocolBase' when calling createConnectionRoutingProtocol(Async)");
        }

        return createConnectionRoutingProtocolCall(connectionId, routingProtocolBase, _callback);

    }

    /**
     * Create Protocol
     * This API provides capability to create Routing Protocol for connections
     * @param connectionId Connection Id (required)
     * @param routingProtocolBase  (required)
     * @return RoutingProtocolData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Connection ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public RoutingProtocolData createConnectionRoutingProtocol(String connectionId, RoutingProtocolBase routingProtocolBase) throws ApiException {
        ApiResponse<RoutingProtocolData> localVarResp = createConnectionRoutingProtocolWithHttpInfo(connectionId, routingProtocolBase);
        return localVarResp.getData();
    }

    /**
     * Create Protocol
     * This API provides capability to create Routing Protocol for connections
     * @param connectionId Connection Id (required)
     * @param routingProtocolBase  (required)
     * @return ApiResponse&lt;RoutingProtocolData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Connection ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RoutingProtocolData> createConnectionRoutingProtocolWithHttpInfo(String connectionId, RoutingProtocolBase routingProtocolBase) throws ApiException {
        okhttp3.Call localVarCall = createConnectionRoutingProtocolValidateBeforeCall(connectionId, routingProtocolBase, null);
        Type localVarReturnType = new TypeToken<RoutingProtocolData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Protocol (asynchronously)
     * This API provides capability to create Routing Protocol for connections
     * @param connectionId Connection Id (required)
     * @param routingProtocolBase  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Connection ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createConnectionRoutingProtocolAsync(String connectionId, RoutingProtocolBase routingProtocolBase, final ApiCallback<RoutingProtocolData> _callback) throws ApiException {

        okhttp3.Call localVarCall = createConnectionRoutingProtocolValidateBeforeCall(connectionId, routingProtocolBase, _callback);
        Type localVarReturnType = new TypeToken<RoutingProtocolData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createConnectionRoutingProtocolsInBulk
     * @param connectionId Connection Id (required)
     * @param connectionRoutingProtocolPostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Connection ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createConnectionRoutingProtocolsInBulkCall(String connectionId, ConnectionRoutingProtocolPostRequest connectionRoutingProtocolPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = connectionRoutingProtocolPostRequest;

        // create path and map variables
        String localVarPath = "/fabric/v4/connections/{connectionId}/routingProtocols/bulk"
            .replace("{" + "connectionId" + "}", localVarApiClient.escapeString(connectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createConnectionRoutingProtocolsInBulkValidateBeforeCall(String connectionId, ConnectionRoutingProtocolPostRequest connectionRoutingProtocolPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'connectionId' is set
        if (connectionId == null) {
            throw new ApiException("Missing the required parameter 'connectionId' when calling createConnectionRoutingProtocolsInBulk(Async)");
        }

        // verify the required parameter 'connectionRoutingProtocolPostRequest' is set
        if (connectionRoutingProtocolPostRequest == null) {
            throw new ApiException("Missing the required parameter 'connectionRoutingProtocolPostRequest' when calling createConnectionRoutingProtocolsInBulk(Async)");
        }

        return createConnectionRoutingProtocolsInBulkCall(connectionId, connectionRoutingProtocolPostRequest, _callback);

    }

    /**
     * Bulk Create Protocol
     * This API provides capability to create Routing Protocol for connections
     * @param connectionId Connection Id (required)
     * @param connectionRoutingProtocolPostRequest  (required)
     * @return GetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Connection ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public GetResponse createConnectionRoutingProtocolsInBulk(String connectionId, ConnectionRoutingProtocolPostRequest connectionRoutingProtocolPostRequest) throws ApiException {
        ApiResponse<GetResponse> localVarResp = createConnectionRoutingProtocolsInBulkWithHttpInfo(connectionId, connectionRoutingProtocolPostRequest);
        return localVarResp.getData();
    }

    /**
     * Bulk Create Protocol
     * This API provides capability to create Routing Protocol for connections
     * @param connectionId Connection Id (required)
     * @param connectionRoutingProtocolPostRequest  (required)
     * @return ApiResponse&lt;GetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Connection ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetResponse> createConnectionRoutingProtocolsInBulkWithHttpInfo(String connectionId, ConnectionRoutingProtocolPostRequest connectionRoutingProtocolPostRequest) throws ApiException {
        okhttp3.Call localVarCall = createConnectionRoutingProtocolsInBulkValidateBeforeCall(connectionId, connectionRoutingProtocolPostRequest, null);
        Type localVarReturnType = new TypeToken<GetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Bulk Create Protocol (asynchronously)
     * This API provides capability to create Routing Protocol for connections
     * @param connectionId Connection Id (required)
     * @param connectionRoutingProtocolPostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Connection ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createConnectionRoutingProtocolsInBulkAsync(String connectionId, ConnectionRoutingProtocolPostRequest connectionRoutingProtocolPostRequest, final ApiCallback<GetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createConnectionRoutingProtocolsInBulkValidateBeforeCall(connectionId, connectionRoutingProtocolPostRequest, _callback);
        Type localVarReturnType = new TypeToken<GetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteConnectionRoutingProtocolByUuid
     * @param routingProtocolId Routing Protocol Id (required)
     * @param connectionId Connection Id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Connection ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteConnectionRoutingProtocolByUuidCall(UUID routingProtocolId, String connectionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fabric/v4/connections/{connectionId}/routingProtocols/{routingProtocolId}"
            .replace("{" + "routingProtocolId" + "}", localVarApiClient.escapeString(routingProtocolId.toString()))
            .replace("{" + "connectionId" + "}", localVarApiClient.escapeString(connectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteConnectionRoutingProtocolByUuidValidateBeforeCall(UUID routingProtocolId, String connectionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'routingProtocolId' is set
        if (routingProtocolId == null) {
            throw new ApiException("Missing the required parameter 'routingProtocolId' when calling deleteConnectionRoutingProtocolByUuid(Async)");
        }

        // verify the required parameter 'connectionId' is set
        if (connectionId == null) {
            throw new ApiException("Missing the required parameter 'connectionId' when calling deleteConnectionRoutingProtocolByUuid(Async)");
        }

        return deleteConnectionRoutingProtocolByUuidCall(routingProtocolId, connectionId, _callback);

    }

    /**
     * Delete Protocol
     * This API provides capability to delete Routing Protocols on virtual connection
     * @param routingProtocolId Routing Protocol Id (required)
     * @param connectionId Connection Id (required)
     * @return RoutingProtocolData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Connection ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public RoutingProtocolData deleteConnectionRoutingProtocolByUuid(UUID routingProtocolId, String connectionId) throws ApiException {
        ApiResponse<RoutingProtocolData> localVarResp = deleteConnectionRoutingProtocolByUuidWithHttpInfo(routingProtocolId, connectionId);
        return localVarResp.getData();
    }

    /**
     * Delete Protocol
     * This API provides capability to delete Routing Protocols on virtual connection
     * @param routingProtocolId Routing Protocol Id (required)
     * @param connectionId Connection Id (required)
     * @return ApiResponse&lt;RoutingProtocolData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Connection ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RoutingProtocolData> deleteConnectionRoutingProtocolByUuidWithHttpInfo(UUID routingProtocolId, String connectionId) throws ApiException {
        okhttp3.Call localVarCall = deleteConnectionRoutingProtocolByUuidValidateBeforeCall(routingProtocolId, connectionId, null);
        Type localVarReturnType = new TypeToken<RoutingProtocolData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Protocol (asynchronously)
     * This API provides capability to delete Routing Protocols on virtual connection
     * @param routingProtocolId Routing Protocol Id (required)
     * @param connectionId Connection Id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Connection ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteConnectionRoutingProtocolByUuidAsync(UUID routingProtocolId, String connectionId, final ApiCallback<RoutingProtocolData> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteConnectionRoutingProtocolByUuidValidateBeforeCall(routingProtocolId, connectionId, _callback);
        Type localVarReturnType = new TypeToken<RoutingProtocolData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getConnectionRoutingProtocolByUuid
     * @param routingProtocolId Routing Protocol Id (required)
     * @param connectionId Connection Id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Connection ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConnectionRoutingProtocolByUuidCall(UUID routingProtocolId, String connectionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fabric/v4/connections/{connectionId}/routingProtocols/{routingProtocolId}"
            .replace("{" + "routingProtocolId" + "}", localVarApiClient.escapeString(routingProtocolId.toString()))
            .replace("{" + "connectionId" + "}", localVarApiClient.escapeString(connectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getConnectionRoutingProtocolByUuidValidateBeforeCall(UUID routingProtocolId, String connectionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'routingProtocolId' is set
        if (routingProtocolId == null) {
            throw new ApiException("Missing the required parameter 'routingProtocolId' when calling getConnectionRoutingProtocolByUuid(Async)");
        }

        // verify the required parameter 'connectionId' is set
        if (connectionId == null) {
            throw new ApiException("Missing the required parameter 'connectionId' when calling getConnectionRoutingProtocolByUuid(Async)");
        }

        return getConnectionRoutingProtocolByUuidCall(routingProtocolId, connectionId, _callback);

    }

    /**
     * Get Protocol
     * This API provides capability to accept/reject user&#39;s virtual connection
     * @param routingProtocolId Routing Protocol Id (required)
     * @param connectionId Connection Id (required)
     * @return RoutingProtocolData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Connection ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public RoutingProtocolData getConnectionRoutingProtocolByUuid(UUID routingProtocolId, String connectionId) throws ApiException {
        ApiResponse<RoutingProtocolData> localVarResp = getConnectionRoutingProtocolByUuidWithHttpInfo(routingProtocolId, connectionId);
        return localVarResp.getData();
    }

    /**
     * Get Protocol
     * This API provides capability to accept/reject user&#39;s virtual connection
     * @param routingProtocolId Routing Protocol Id (required)
     * @param connectionId Connection Id (required)
     * @return ApiResponse&lt;RoutingProtocolData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Connection ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RoutingProtocolData> getConnectionRoutingProtocolByUuidWithHttpInfo(UUID routingProtocolId, String connectionId) throws ApiException {
        okhttp3.Call localVarCall = getConnectionRoutingProtocolByUuidValidateBeforeCall(routingProtocolId, connectionId, null);
        Type localVarReturnType = new TypeToken<RoutingProtocolData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Protocol (asynchronously)
     * This API provides capability to accept/reject user&#39;s virtual connection
     * @param routingProtocolId Routing Protocol Id (required)
     * @param connectionId Connection Id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Connection ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConnectionRoutingProtocolByUuidAsync(UUID routingProtocolId, String connectionId, final ApiCallback<RoutingProtocolData> _callback) throws ApiException {

        okhttp3.Call localVarCall = getConnectionRoutingProtocolByUuidValidateBeforeCall(routingProtocolId, connectionId, _callback);
        Type localVarReturnType = new TypeToken<RoutingProtocolData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getConnectionRoutingProtocols
     * @param connectionId Connection Id (required)
     * @param offset offset (optional)
     * @param limit number of records to fetch (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Connection ID Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConnectionRoutingProtocolsCall(String connectionId, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fabric/v4/connections/{connectionId}/routingProtocols"
            .replace("{" + "connectionId" + "}", localVarApiClient.escapeString(connectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getConnectionRoutingProtocolsValidateBeforeCall(String connectionId, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'connectionId' is set
        if (connectionId == null) {
            throw new ApiException("Missing the required parameter 'connectionId' when calling getConnectionRoutingProtocols(Async)");
        }

        return getConnectionRoutingProtocolsCall(connectionId, offset, limit, _callback);

    }

    /**
     * GetRoutingProtocols
     * This API provides capability to get Routing Protocols for connections
     * @param connectionId Connection Id (required)
     * @param offset offset (optional)
     * @param limit number of records to fetch (optional)
     * @return GetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Connection ID Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public GetResponse getConnectionRoutingProtocols(String connectionId, Integer offset, Integer limit) throws ApiException {
        ApiResponse<GetResponse> localVarResp = getConnectionRoutingProtocolsWithHttpInfo(connectionId, offset, limit);
        return localVarResp.getData();
    }

    /**
     * GetRoutingProtocols
     * This API provides capability to get Routing Protocols for connections
     * @param connectionId Connection Id (required)
     * @param offset offset (optional)
     * @param limit number of records to fetch (optional)
     * @return ApiResponse&lt;GetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Connection ID Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetResponse> getConnectionRoutingProtocolsWithHttpInfo(String connectionId, Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getConnectionRoutingProtocolsValidateBeforeCall(connectionId, offset, limit, null);
        Type localVarReturnType = new TypeToken<GetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * GetRoutingProtocols (asynchronously)
     * This API provides capability to get Routing Protocols for connections
     * @param connectionId Connection Id (required)
     * @param offset offset (optional)
     * @param limit number of records to fetch (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Connection ID Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConnectionRoutingProtocolsAsync(String connectionId, Integer offset, Integer limit, final ApiCallback<GetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getConnectionRoutingProtocolsValidateBeforeCall(connectionId, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<GetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getConnectionRoutingProtocolsChangeByUuid
     * @param connectionId Connection Id (required)
     * @param routingProtocolId Routing Protocol Id (required)
     * @param changeId Routing Protocol Change UUID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fabric Routing Protocol Change object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Connection ID Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConnectionRoutingProtocolsChangeByUuidCall(String connectionId, UUID routingProtocolId, UUID changeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fabric/v4/connections/{connectionId}/routingProtocols/{routingProtocolId}/changes/{changeId}"
            .replace("{" + "connectionId" + "}", localVarApiClient.escapeString(connectionId.toString()))
            .replace("{" + "routingProtocolId" + "}", localVarApiClient.escapeString(routingProtocolId.toString()))
            .replace("{" + "changeId" + "}", localVarApiClient.escapeString(changeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getConnectionRoutingProtocolsChangeByUuidValidateBeforeCall(String connectionId, UUID routingProtocolId, UUID changeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'connectionId' is set
        if (connectionId == null) {
            throw new ApiException("Missing the required parameter 'connectionId' when calling getConnectionRoutingProtocolsChangeByUuid(Async)");
        }

        // verify the required parameter 'routingProtocolId' is set
        if (routingProtocolId == null) {
            throw new ApiException("Missing the required parameter 'routingProtocolId' when calling getConnectionRoutingProtocolsChangeByUuid(Async)");
        }

        // verify the required parameter 'changeId' is set
        if (changeId == null) {
            throw new ApiException("Missing the required parameter 'changeId' when calling getConnectionRoutingProtocolsChangeByUuid(Async)");
        }

        return getConnectionRoutingProtocolsChangeByUuidCall(connectionId, routingProtocolId, changeId, _callback);

    }

    /**
     * Get Change By ID
     * This API provides capability to retrieve specific Routing Protocol Change
     * @param connectionId Connection Id (required)
     * @param routingProtocolId Routing Protocol Id (required)
     * @param changeId Routing Protocol Change UUID (required)
     * @return RoutingProtocolChangeData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fabric Routing Protocol Change object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Connection ID Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public RoutingProtocolChangeData getConnectionRoutingProtocolsChangeByUuid(String connectionId, UUID routingProtocolId, UUID changeId) throws ApiException {
        ApiResponse<RoutingProtocolChangeData> localVarResp = getConnectionRoutingProtocolsChangeByUuidWithHttpInfo(connectionId, routingProtocolId, changeId);
        return localVarResp.getData();
    }

    /**
     * Get Change By ID
     * This API provides capability to retrieve specific Routing Protocol Change
     * @param connectionId Connection Id (required)
     * @param routingProtocolId Routing Protocol Id (required)
     * @param changeId Routing Protocol Change UUID (required)
     * @return ApiResponse&lt;RoutingProtocolChangeData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fabric Routing Protocol Change object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Connection ID Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RoutingProtocolChangeData> getConnectionRoutingProtocolsChangeByUuidWithHttpInfo(String connectionId, UUID routingProtocolId, UUID changeId) throws ApiException {
        okhttp3.Call localVarCall = getConnectionRoutingProtocolsChangeByUuidValidateBeforeCall(connectionId, routingProtocolId, changeId, null);
        Type localVarReturnType = new TypeToken<RoutingProtocolChangeData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Change By ID (asynchronously)
     * This API provides capability to retrieve specific Routing Protocol Change
     * @param connectionId Connection Id (required)
     * @param routingProtocolId Routing Protocol Id (required)
     * @param changeId Routing Protocol Change UUID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fabric Routing Protocol Change object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Connection ID Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConnectionRoutingProtocolsChangeByUuidAsync(String connectionId, UUID routingProtocolId, UUID changeId, final ApiCallback<RoutingProtocolChangeData> _callback) throws ApiException {

        okhttp3.Call localVarCall = getConnectionRoutingProtocolsChangeByUuidValidateBeforeCall(connectionId, routingProtocolId, changeId, _callback);
        Type localVarReturnType = new TypeToken<RoutingProtocolChangeData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getConnectionRoutingProtocolsChanges
     * @param connectionId Connection Id (required)
     * @param routingProtocolId Routing Protocol Id (required)
     * @param offset offset (optional)
     * @param limit number of records to fetch (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fabric Routing Protocol Change object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Connection ID Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConnectionRoutingProtocolsChangesCall(String connectionId, UUID routingProtocolId, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fabric/v4/connections/{connectionId}/routingProtocols/{routingProtocolId}/changes"
            .replace("{" + "connectionId" + "}", localVarApiClient.escapeString(connectionId.toString()))
            .replace("{" + "routingProtocolId" + "}", localVarApiClient.escapeString(routingProtocolId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getConnectionRoutingProtocolsChangesValidateBeforeCall(String connectionId, UUID routingProtocolId, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'connectionId' is set
        if (connectionId == null) {
            throw new ApiException("Missing the required parameter 'connectionId' when calling getConnectionRoutingProtocolsChanges(Async)");
        }

        // verify the required parameter 'routingProtocolId' is set
        if (routingProtocolId == null) {
            throw new ApiException("Missing the required parameter 'routingProtocolId' when calling getConnectionRoutingProtocolsChanges(Async)");
        }

        return getConnectionRoutingProtocolsChangesCall(connectionId, routingProtocolId, offset, limit, _callback);

    }

    /**
     * Get Changes
     * This API provides capability to retrieve user&#39;s Routing Protocol Changes
     * @param connectionId Connection Id (required)
     * @param routingProtocolId Routing Protocol Id (required)
     * @param offset offset (optional)
     * @param limit number of records to fetch (optional)
     * @return RoutingProtocolChangeDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fabric Routing Protocol Change object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Connection ID Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public RoutingProtocolChangeDataResponse getConnectionRoutingProtocolsChanges(String connectionId, UUID routingProtocolId, Integer offset, Integer limit) throws ApiException {
        ApiResponse<RoutingProtocolChangeDataResponse> localVarResp = getConnectionRoutingProtocolsChangesWithHttpInfo(connectionId, routingProtocolId, offset, limit);
        return localVarResp.getData();
    }

    /**
     * Get Changes
     * This API provides capability to retrieve user&#39;s Routing Protocol Changes
     * @param connectionId Connection Id (required)
     * @param routingProtocolId Routing Protocol Id (required)
     * @param offset offset (optional)
     * @param limit number of records to fetch (optional)
     * @return ApiResponse&lt;RoutingProtocolChangeDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fabric Routing Protocol Change object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Connection ID Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RoutingProtocolChangeDataResponse> getConnectionRoutingProtocolsChangesWithHttpInfo(String connectionId, UUID routingProtocolId, Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getConnectionRoutingProtocolsChangesValidateBeforeCall(connectionId, routingProtocolId, offset, limit, null);
        Type localVarReturnType = new TypeToken<RoutingProtocolChangeDataResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Changes (asynchronously)
     * This API provides capability to retrieve user&#39;s Routing Protocol Changes
     * @param connectionId Connection Id (required)
     * @param routingProtocolId Routing Protocol Id (required)
     * @param offset offset (optional)
     * @param limit number of records to fetch (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fabric Routing Protocol Change object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Connection ID Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConnectionRoutingProtocolsChangesAsync(String connectionId, UUID routingProtocolId, Integer offset, Integer limit, final ApiCallback<RoutingProtocolChangeDataResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getConnectionRoutingProtocolsChangesValidateBeforeCall(connectionId, routingProtocolId, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<RoutingProtocolChangeDataResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for replaceConnectionRoutingProtocolByUuid
     * @param routingProtocolId Routing Protocol Id (required)
     * @param connectionId Connection Id (required)
     * @param routingProtocolBase  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Connection ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replaceConnectionRoutingProtocolByUuidCall(UUID routingProtocolId, String connectionId, RoutingProtocolBase routingProtocolBase, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = routingProtocolBase;

        // create path and map variables
        String localVarPath = "/fabric/v4/connections/{connectionId}/routingProtocols/{routingProtocolId}"
            .replace("{" + "routingProtocolId" + "}", localVarApiClient.escapeString(routingProtocolId.toString()))
            .replace("{" + "connectionId" + "}", localVarApiClient.escapeString(connectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replaceConnectionRoutingProtocolByUuidValidateBeforeCall(UUID routingProtocolId, String connectionId, RoutingProtocolBase routingProtocolBase, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'routingProtocolId' is set
        if (routingProtocolId == null) {
            throw new ApiException("Missing the required parameter 'routingProtocolId' when calling replaceConnectionRoutingProtocolByUuid(Async)");
        }

        // verify the required parameter 'connectionId' is set
        if (connectionId == null) {
            throw new ApiException("Missing the required parameter 'connectionId' when calling replaceConnectionRoutingProtocolByUuid(Async)");
        }

        // verify the required parameter 'routingProtocolBase' is set
        if (routingProtocolBase == null) {
            throw new ApiException("Missing the required parameter 'routingProtocolBase' when calling replaceConnectionRoutingProtocolByUuid(Async)");
        }

        return replaceConnectionRoutingProtocolByUuidCall(routingProtocolId, connectionId, routingProtocolBase, _callback);

    }

    /**
     * Replace Protocol
     * This API provides capability to replace complete Routing Protocols on a virtual connection
     * @param routingProtocolId Routing Protocol Id (required)
     * @param connectionId Connection Id (required)
     * @param routingProtocolBase  (required)
     * @return RoutingProtocolData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Connection ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public RoutingProtocolData replaceConnectionRoutingProtocolByUuid(UUID routingProtocolId, String connectionId, RoutingProtocolBase routingProtocolBase) throws ApiException {
        ApiResponse<RoutingProtocolData> localVarResp = replaceConnectionRoutingProtocolByUuidWithHttpInfo(routingProtocolId, connectionId, routingProtocolBase);
        return localVarResp.getData();
    }

    /**
     * Replace Protocol
     * This API provides capability to replace complete Routing Protocols on a virtual connection
     * @param routingProtocolId Routing Protocol Id (required)
     * @param connectionId Connection Id (required)
     * @param routingProtocolBase  (required)
     * @return ApiResponse&lt;RoutingProtocolData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Connection ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RoutingProtocolData> replaceConnectionRoutingProtocolByUuidWithHttpInfo(UUID routingProtocolId, String connectionId, RoutingProtocolBase routingProtocolBase) throws ApiException {
        okhttp3.Call localVarCall = replaceConnectionRoutingProtocolByUuidValidateBeforeCall(routingProtocolId, connectionId, routingProtocolBase, null);
        Type localVarReturnType = new TypeToken<RoutingProtocolData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Replace Protocol (asynchronously)
     * This API provides capability to replace complete Routing Protocols on a virtual connection
     * @param routingProtocolId Routing Protocol Id (required)
     * @param connectionId Connection Id (required)
     * @param routingProtocolBase  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Connection ID Not Found </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call replaceConnectionRoutingProtocolByUuidAsync(UUID routingProtocolId, String connectionId, RoutingProtocolBase routingProtocolBase, final ApiCallback<RoutingProtocolData> _callback) throws ApiException {

        okhttp3.Call localVarCall = replaceConnectionRoutingProtocolByUuidValidateBeforeCall(routingProtocolId, connectionId, routingProtocolBase, _callback);
        Type localVarReturnType = new TypeToken<RoutingProtocolData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
